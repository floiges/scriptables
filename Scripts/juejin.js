// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: deep-gray; icon-glyph: code-branch;

const config = {
	getCountsUrl: 'https://api.juejin.cn/growth_api/v1/get_counts', // ËøûÁª≠Á≠æÂà∞Ê¨°Êï∞
	currentPointsUrl: 'https://api.juejin.cn/growth_api/v1/get_cur_point', // ÂΩìÂâçÁüøÁü≥ÊÄªÊï∞
	signInUrl: `https://api.juejin.cn/growth_api/v1/check_in`, //Á≠æÂà∞Êé•Âè£
	freeCheckUrl: `https://api.juejin.cn/growth_api/v1/lottery_config/get`, //ÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞Êü•ËØ¢
	drawUrl: `https://api.juejin.cn/growth_api/v1/lottery/draw`, //ÊäΩÂ•ñÊé•Âè£
	headers: {
		Referer: 'https://juejin.cn/',
		'Upgrade-Insecure-Requests': 1,
		'User-Agent':
			'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36',
		cookie: `_ga=GA1.2.389726999.1606803038; MONITOR_WEB_ID=f8206ba6-3d9d-4696-bfc2-8946d7e78d8e; __tea_cookie_tokens_2608=%7B%22user_unique_id%22%3A%226901166487929112077%22%2C%22web_id%22%3A%226901166487929112077%22%2C%22timestamp%22%3A1640747644777%7D; n_mh=h2mcv-yYgGGKdAktKXV0-9I1UjBsChFP5IRxa2LV12s; sid_guard=9e17a0b1387c53b90321f9cbfd19ed91|1652430319|31536000|Sat,+13-May-2023+08:25:19+GMT; uid_tt=37723cdecefe5c071704e0e13543ba30; uid_tt_ss=37723cdecefe5c071704e0e13543ba30; sid_tt=9e17a0b1387c53b90321f9cbfd19ed91; sessionid=9e17a0b1387c53b90321f9cbfd19ed91; sessionid_ss=9e17a0b1387c53b90321f9cbfd19ed91; sid_ucp_v1=1.0.0-KGZiM2UzZDdiNGZiZjcwN2VlYThkZDFiNmVjYzVlYTdkYzIyMTdhODYKFwjehYG-_fW1AxDvq_iTBhiwFDgCQO8HGgJsZiIgOWUxN2EwYjEzODdjNTNiOTAzMjFmOWNiZmQxOWVkOTE; ssid_ucp_v1=1.0.0-KGZiM2UzZDdiNGZiZjcwN2VlYThkZDFiNmVjYzVlYTdkYzIyMTdhODYKFwjehYG-_fW1AxDvq_iTBhiwFDgCQO8HGgJsZiIgOWUxN2EwYjEzODdjNTNiOTAzMjFmOWNiZmQxOWVkOTE; _tea_utm_cache_2608={"utm_source":"gold_browser_extension"}; _gid=GA1.2.1426166690.1658709949`, //Áî®Ëá™Â∑±ÁöÑ
	}, //Áõ∏ÂÖ≥ËØ∑Ê±ÇÂ§¥
};

/**
 * ÊéòÈáëËá™Âä®Á≠æÂà∞ ËØ∑Ê±ÇÊñπÊ≥ï
 */
const hacpaiSignRequest = async () => {
	console.log(`\n\n------ ÂºÄÂßãÁ≠æÂà∞------\n`);
	const { headers, signInUrl } = config; //Á≠æÂà∞Áõ∏ÂÖ≥ÂèÇÊï∞
	let req = new Request(signInUrl);
	req.method = 'POST';
	req.headers = headers;
	const res = await req.loadJSON();
	if (res && res.data) {
		console.log(
			`\n ${JSON.stringify(res.data)} \n \n ------ Á≠æÂà∞ÊàêÂäü ------\n`,
		);
		//Á≠æÂà∞ÊàêÂäüÂêéÊé®ÈÄÅÊ∂àÊÅØ
		if (res.data.err_no == 0) {
			pushNotification(
				`ÊéòÈáëÁ≠æÂà∞ÁªìÊûú`,
				`Ëé∑Âæó: ${res.data.incr_point}ÁüøÁü≥;\n ÊÄªËÆ°: ${res.data.sum_point}ÁüøÁü≥`,
			);
		} else {
			pushNotification(`ÊéòÈáëÁ≠æÂà∞Â§±Ë¥•`);
		}
		//Á≠æÂà∞ÊàêÂäüÂêéÔºå30sÂÜÖÊü•ËØ¢ÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞
		setTimeout(() => {
			freeCheck();
		}, Math.random() * 30 * 1000);
	} else {
		console.log(res);
		console.log(`\n ------ Á≠æÂà∞Â§±Ë¥• ------ \n`);
		pushNotification(`ÊéòÈáëÁ≠æÂà∞ÁªìÊûú`); //Á≠æÂà∞ÊàêÂäüÂêéÊé®ÈÄÅÊ∂àÊÅØ
	}
};

/**
 * Êü•ËØ¢ËøòÊúâÂá†Ê¨°ÂÖçË¥πÊäΩÂ•ñÁöÑÊú∫‰ºö
 */
const freeCheck = async () => {
	console.log(`\n------ÂºÄÂßãÊü•ËØ¢ÊäΩÂ•ñÊ¨°Êï∞ ------`);
	const { headers, freeCheckUrl } = config; //Êü•ËØ¢ÂÖçË¥πÊ¨°Êï∞Áõ∏ÂÖ≥ÂèÇÊï∞
	let req = new Request(freeCheckUrl);
	req.headers = headers;
	const res = await req.loadJSON();
	if (res && res.data) {
		console.log(
			`\n------ Ëé∑ÂæóÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞Ôºö${res.data.free_count || 0} ------\n`,
		);
		if (res.data.free_count > 0) {
			//Â¶ÇÊûúÊúâÂÖçË¥πÊäΩÂ•ñÊ¨°Êï∞Áõ¥Êé•ÂºÄÂßãÊäΩÂ•ñ
			luckDraw();
		}
	} else {
		console.log(res);
		console.log(`\n------ Êü•ËØ¢ÊäΩÂ•ñÊ¨°Êï∞Â§±Ë¥• ------\n`);
	}
	return res;
};

/**
 * ÊéòÈáëÊäΩÂ•ñÂáΩÊï∞ÊñπÊ≥ï
 */
const luckDraw = async () => {
	console.log(`\n------ ÂºÄÂßãÊäΩÂ•ñ ------`);
	const { headers, drawUrl } = config; //ÊäΩÂ•ñÁõ∏ÂÖ≥ÂèÇÊï∞
	let req = new Request(drawUrl);
	req.method = 'POST';
	req.headers = headers;
	const res = await req.loadJSON();
	if (res && res.data) {
		console.log(`\n ------ ÊäΩÂ•ñÊàêÂäüÔºåËé∑ÂæóÔºö${res.data.lottery_name} ------\n`);
		pushNotification('ÊäΩÂ•ñÊàêÂäü', res.data.lottery_name);
	} else {
		console.log(res);
		console.log(`\n ------ ÊäΩÂ•ñÂ§±Ë¥• ------ \n`);
		pushNotification('ÊäΩÂ•ñÂ§±Ë¥•');
	}
};

/**
 * Ëé∑ÂèñËøûÁª≠Á≠æÂà∞Ê¨°Êï∞
 */
const getSignCounts = async () => {
	const { headers, getCountsUrl } = config; //ÊäΩÂ•ñÁõ∏ÂÖ≥ÂèÇÊï∞
	let req = new Request(getCountsUrl);
	req.method = 'GET';
	req.headers = headers;
	const res = await req.loadJSON();
	console.log('üöÄ ~ file: juejin.js ~ line 107 ~ getSignCounts ~ res', res);
	if (res && res.data) {
		return res.data;
	}

	return {};
};

/**
 * Ëé∑ÂèñÁüøÁü≥ÊÄªÊï∞
 */
const getCurrentPoints = async () => {
	const { headers, currentPointsUrl } = config; //ÊäΩÂ•ñÁõ∏ÂÖ≥ÂèÇÊï∞
	let req = new Request(currentPointsUrl);
	req.method = 'GET';
	req.headers = headers;
	const res = await req.loadJSON();
	console.log('üöÄ ~ file: juejin.js ~ line 123 ~ getCurrentPoints ~ res', res);
	if (res && res.data) {
		return res.data;
	}

	return 0;
};

const pushNotification = (title, body = 'Êó†') => {
	const n = new Notification();
	n.title = title;
	n.body = `„ÄåScriptable„Äç${body}ÔºÅ`;
	n.schedule();
};

module.exports = {
	hacpaiSignRequest,
	getCurrentPoints,
	getSignCounts,
};
